apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    application: {{ template "fullname" . }}
    component: {{ template "name" . }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: {{ template "fullname" . }}
  template:
    metadata:
    {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
    {{- end }}
      labels:
        {{- if and (.Values.tolerations) (le .Capabilities.KubeVersion.Minor "5") }}
        scheduler.alpha.kubernetes.io/tolerations: '{{ toJson .Values.tolerations }}'
        {{- end }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        application: {{ template "fullname" . }}
        component: {{ template "name" . }}
    spec:
      serviceAccountName: {{ template "fullname" . }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if and (.Values.tolerations) (ge .Capabilities.KubeVersion.Minor "6") }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      containers:
        - name: configmap-reload
          image: "{{ .Values.configmapReload.image.name }}:{{ .Values.configmapReload.image.tag }}"
          imagePullPolicy: "{{ .Values.configmapReload.image.pullPolicy }}"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:{{ .Values.port }}/-/reload
          resources:
{{ toYaml .Values.configmapReload.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: {{ template "name" . }}
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: "{{ .Values.image.pullPolicy }}"
          args:
          {{- if .Values.alertmanagerURL }}
            - --alertmanager.url={{ .Values.alertmanagerURL }}
          {{- end }}
            - --config.file=/etc/config/prometheus.yml
            - --storage.local.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
          ports:
            - name: server
              containerPort: {{ .Values.port }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{ .Values.port }}
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: "/data"
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "fullname" . }}
        - name: storage-volume
        {{- if not .Values.persistentVolume.enabled }}
          emptyDir: {}
        {{- end -}}
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        labels:
          chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
          release: "{{ .Release.Name }}"
          heritage: "{{ .Release.Service }}"
          application: {{ template "fullname" . }}
          component: {{ template "name" . }}
        annotations:
        {{- range $key, $value := .Values.persistentVolume.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        storageClassName: {{ .Values.persistentVolume.storageClass | quote }}
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
{{- end }}
